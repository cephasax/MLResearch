
------------------------------------------------------------------------
Generation: 1 for dataset: x.arff
------------------------------------------------------------------------

 >>> Population 
 
Solution [PossibilityKeySet [key=Stacking, keyValuesPairs={B=5, S=117, num=9, X=3}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=false, F=true, X=true, I=false, K=36}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.SMO, keyValuesPairs={SEL=weka.classifiers.functions.supportVector.Puk -O 1.0 -S 1.0 -C 250007}, branchClassifiers=[]], PossibilityKeySet [key=NET, keyValuesPairs={Q=weka.classifiers.bayes.net.search.local.TAN, D=false}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.SMO, keyValuesPairs={SEL=weka.classifiers.functions.supportVector.Puk -O 1.0 -S 1.0 -C 250007}, branchClassifiers=[]], PossibilityKeySet [key=NET, keyValuesPairs={Q=weka.classifiers.bayes.net.search.local.TAN, D=false}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.MultilayerPerceptron, keyValuesPairs={B=false, R=false, C=true, S=40, D=false, H=a, L=0.9, M=0.7}, branchClassifiers=[]], PossibilityKeySet [key=KStar, keyValuesPairs={B=8, E=false, M=n}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.SMO, keyValuesPairs={SEL=weka.classifiers.functions.supportVector.PolyKernel -E 1.0 -C 250007}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.MultilayerPerceptron, keyValuesPairs={B=true, R=false, C=true, S=188, D=false, H=i, L=0.1, M=0.9}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=AdaBoost, keyValuesPairs={P=71, Q=false, S=170, I=13}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=false, F=true, X=true, I=false, K=31}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=RandomCommittee, keyValuesPairs={S=60, I=36}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=true, F=false, X=false, I=false, K=47}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=Vote, keyValuesPairs={R=PROD, B=8, S=22, num=9}, branchClassifiers=[PossibilityKeySet [key=NET, keyValuesPairs={Q=weka.classifiers.bayes.net.search.local.TabuSearch, D=true}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.trees.J48, keyValuesPairs={A=false, B=false, S=false, C=0.5, U=true, J=false, M=13, O=false}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.MultilayerPerceptron, keyValuesPairs={B=true, R=false, C=true, S=244, D=false, H=t, L=1.0, M=0.9}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.SMO, keyValuesPairs={SEL=Default}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=true, F=false, X=false, I=true, K=45}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=false, F=false, X=true, I=true, K=21}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.trees.J48, keyValuesPairs={A=true, B=true, S=true, C=0.7, U=false, J=true, M=11, O=false}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.MultilayerPerceptron, keyValuesPairs={B=true, R=true, C=false, S=214, D=false, H=i, L=0.9, M=0.7}, branchClassifiers=[]], PossibilityKeySet [key=KStar, keyValuesPairs={B=34, E=false, M=d}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=RandomCommittee, keyValuesPairs={S=64, I=63}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.rules.DecisionTable, keyValuesPairs={S=GreedyStepwise -T -1.7976931348623157E308 -N 1 -num-slots 1, E=acc, X=1, I=true}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=Stacking, keyValuesPairs={B=3, S=139, num=3, X=7}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.rules.DecisionTable, keyValuesPairs={S=BestFirst -D 1 -N 5, E=rmse, X=3, I=false}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=true, F=false, X=false, I=true, K=56}, branchClassifiers=[]], PossibilityKeySet [key=KStar, keyValuesPairs={B=59, E=true, M=m}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=RandomCommittee, keyValuesPairs={S=77, I=64}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.trees.J48, keyValuesPairs={A=true, B=true, S=true, C=0.2, U=true, J=true, M=63, O=false}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=Bagging, keyValuesPairs={P=73, S=154, I=51, O=false}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.rules.DecisionTable, keyValuesPairs={S=GreedyStepwise -T -1.7976931348623157E308 -N 1 -num-slots 1, E=rmse, X=1, I=false}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=weka.classifiers.trees.J48, keyValuesPairs={A=false, B=false, S=true, C=0.4, U=false, J=false, M=57, O=true}, branchClassifiers=[]]]
Solution [PossibilityKeySet [key=Vote, keyValuesPairs={R=MED, B=9, S=228, num=7}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=false, F=true, X=false, I=false, K=38}, branchClassifiers=[]], PossibilityKeySet [key=NET, keyValuesPairs={Q=weka.classifiers.bayes.net.search.local.TAN, D=true}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.trees.RandomTree, keyValuesPairs={depth=6, U=false, K=8, M=9, N=0}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.trees.J48, keyValuesPairs={A=true, B=false, S=false, C=0.9, U=false, J=false, M=23, O=true}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.SMO, keyValuesPairs={SEL=weka.classifiers.functions.supportVector.Puk -O 1.0 -S 1.0 -C 250007}, branchClassifiers=[]], PossibilityKeySet [key=KStar, keyValuesPairs={B=85, E=true, M=n}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.trees.J48, keyValuesPairs={A=false, B=true, S=true, C=0.1, U=true, J=true, M=47, O=true}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=RandomCommittee, keyValuesPairs={S=58, I=5}, branchClassifiers=[PossibilityKeySet [key=KStar, keyValuesPairs={B=94, E=true, M=m}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=RandomCommittee, keyValuesPairs={S=250, I=4}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.rules.DecisionTable, keyValuesPairs={S=BestFirst -D 1 -N 5, E=mae, X=4, I=true}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=RandomForest, keyValuesPairs={W=4, I=116, K=6}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.trees.RandomTree, keyValuesPairs={depth=17, U=false, K=4, M=5, N=5}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=AdaBoost, keyValuesPairs={P=52, Q=true, S=193, I=42}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=true, F=false, X=true, I=false, K=44}, branchClassifiers=[]]]]]
Solution [PossibilityKeySet [key=Vote, keyValuesPairs={R=AVG, B=3, S=202, num=8}, branchClassifiers=[PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=false, F=false, X=false, I=true, K=21}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.MultilayerPerceptron, keyValuesPairs={B=false, R=true, C=false, S=199, D=true, H=i, L=0.4, M=0.6}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.MultilayerPerceptron, keyValuesPairs={B=true, R=true, C=true, S=56, D=false, H=i, L=1.0, M=0.9}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.MultilayerPerceptron, keyValuesPairs={B=true, R=true, C=false, S=222, D=true, H=t, L=0.6, M=0.1}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.SMO, keyValuesPairs={SEL=weka.classifiers.functions.supportVector.NormalizedPolyKernel -E 2.0 -C 250007}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.lazy.IBk, keyValuesPairs={E=true, F=true, X=true, I=false, K=58}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.functions.SMO, keyValuesPairs={SEL=Default}, branchClassifiers=[]], PossibilityKeySet [key=weka.classifiers.trees.J48, keyValuesPairs={A=true, B=false, S=true, C=0.25, U=false, J=false, M=24, O=false}, branchClassifiers=[]]]]]

 >>> Ordered Population - according accuracy 
 
